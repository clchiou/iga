__all__ = [
    'NinjaRule',
    'write_header_to',
]

import iga.env
import iga.preconditions
from iga.registry import RegistryMixin

RULE_VARS_1_0 = frozenset((
    'command',
    'depfile',
    'description',
    'generator',
    'in',
    'in_newline',
    'out',
    'restat',
    'rspfile',
    'rspfile_content',
))


RULE_VARS_1_3 = frozenset((
    'deps',
))


RULE_VARS_1_5 = frozenset((
    'msvc_deps_prefix',
))


RULE_VARS = RULE_VARS_1_0 | RULE_VARS_1_3 | RULE_VARS_1_5


RESERVED_RULE_NAMES = frozenset((
    'phony',
))


INDENT = '  '


NINJA_HEADER = '''\
# This fils is generated by iga.

ninja_required_version = 1.5

'''


NINJA_RULE = '''\
rule {rule.name}
  command = {rule.command}
'''


def write_header_to(ninja_file, *, _env=None):
    env = _env or iga.env.current()
    ninja_file.write(NINJA_HEADER)
    if env['variables']:
        _write_vars(ninja_file, env['variables'], indent=0)
        ninja_file.write('\n')


class NinjaRule(RegistryMixin):

    @staticmethod
    def make(name, command, **kwargs):
        iga.preconditions.check(
            name not in RESERVED_RULE_NAMES,
            'cannot use %r as rule name', name,
        )
        variables = dict(kwargs)
        forbiddens = frozenset(variables) - RULE_VARS
        iga.preconditions.check(
            not forbiddens, 'cannot use %r in a rule', forbiddens
        )
        return NinjaRule(name=name, command=command, variables=variables)

    def __init__(self, name, command, variables):
        self.name = name
        self.command = command
        self.variables = variables

    def write_to(self, ninja_file):
        ninja_file.write(NINJA_RULE.format(rule=self))
        _write_vars(ninja_file, self.variables, indent=1)
        ninja_file.write('\n')


class NinjaBuildstmt:

    @staticmethod
    def make(**kwargs):
        kwargs.setdefault('explicit_deps', ())
        kwargs.setdefault('implicit_deps', ())
        kwargs.setdefault('orderonly_deps', ())
        kwargs.setdefault('variables', {})
        return NinjaBuildstmt(**kwargs)

    def __init__(self,
                 ninja_rule,
                 outputs,
                 explicit_deps,
                 implicit_deps,
                 orderonly_deps,
                 variables):
        self.ninja_rule = ninja_rule
        self.outputs = outputs
        self.explicit_deps = explicit_deps
        self.implicit_deps = implicit_deps
        self.orderonly_deps = orderonly_deps
        self.variables = variables

    def write_to(self, ninja_file):
        ninja_file.write(
            'build %s: %s' % (_paths(self.outputs), self.ninja_rule)
        )
        for sep, deps in ((' ', self.explicit_deps),
                          (' | ', self.implicit_deps),
                          (' || ', self.orderonly_deps)):
            if deps:
                ninja_file.write(sep)
                ninja_file.write(_paths(deps))
        ninja_file.write('\n')
        _write_vars(ninja_file, self.variables, indent=1)
        ninja_file.write('\n')


def _paths(labels):
    return ' '.join(str(label.path) for label in labels)


def _write_vars(ninja_file, variables, indent):
    indent = INDENT * indent
    for key in sorted(variables):
        value = variables[key]
        ninja_file.write('%s%s = %s\n' % (indent, key, value))
